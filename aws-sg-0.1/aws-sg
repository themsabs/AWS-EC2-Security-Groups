#!/bin/bash

usage="$(basename "$0") [-h --help] [-p --port -g --group] [-m --max -n --number -a --asc -d --desc] -- program to manage EC2 security groups 

where:
    -h --help    show this help text
    -p --port    set the port value (example: 22 - ssh) *required
    -g --group   set the group name (example: default) *required
    -m --max     set the number of rules allowed (default: 0)
    -n --number  set the number of rules to be deleted (default: delete until down to supplied max value)
    -a --asc     delete the oldest rules first (default)
    -d --desc    delete the newest rules first"

if [ -z $(which jq) ] 
then 
  jq
  echo "jq command is not installed"
  exit
fi

if [ -z $(which aws) ] 
then 
  aws
  echo "aws command is not installed"
  exit
fi

desc=0
asc=0

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    echo "$usage"
    exit
    ;;
    -p|--port)
    port="$2"
    shift # past argument
    shift # past value
    ;;
    -g|--group)
    groupName="$2"
    shift # past argument
    shift # past value
    ;;
    -m|--max)
    maxRules="$2"
    shift # past argument
    shift # past value
    ;;
    -n|--number)
    numDelete="$2"
    shift # past argument
    shift # past value
    ;;
    -d|--desc)
    desc=1
    shift # past argument
    ;;
    -a|--asc)
    asc=1 
    shift # past argument
    ;;
    :) printf "missing argument for -%s\n" "$OPTARG" >&2
    echo "$usage" >&2
    exit
    ;;
    \?) printf "illegal option: -%s\n" "$OPTARG" >&2
    echo "$usage" >&2
    exit
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    echo "$(basename "$0") illegal option"
    exit
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z $port ]
then
  echo "Port parameter needed!" && exit 1;
fi

if [ -z $groupName ]
then
  echo "Group name parameter needed!" && exit 1;
fi

if [ -z $maxRules ]
then
  maxRules=0;
fi

if [ $desc -eq $asc ]
then
  if [ $desc -eq 1 ] 
  then
    echo "--desc and --asc flags cannot both be set"
    exit
  fi
  asc=1 
fi


#get the number of protocols in the security group
numProtocols=$(aws ec2 describe-security-groups --group-name $groupName | jq -r \ '.["SecurityGroups"] | .[0] | .["IpPermissions"]' | jq length)

for (( i=0; i<$numProtocols; i++ ))
do
        thisPort=$(aws ec2 describe-security-groups --group-name $groupName | jq -r \ '.["SecurityGroups"] | .[0] | .["IpPermissions"] | .['"$i"'] | .["FromPort"]');
        if [ $thisPort -eq $port ]
        then
	numRules=$(aws ec2 describe-security-groups --group-name $groupName | jq -r \ '.["SecurityGroups"] | .[0] | .["IpPermissions"] | .['"$i"'] | .["IpRanges"]' | jq length)	
	if [ $numRules -gt $maxRules ]
	then

	#desc is most recent first	
	#if desc, always delete the highest # row, so x=(numRules-1) and x-- after each iteration
	if [ $desc -eq 1 ]
	then
	  delNumber=$((numRules-1))
 	fi
	
	#asc is oldest first
	#if asc, always delete the 0 row
	if [ $asc -eq 1 ]
        then
          delNumber=0
        fi

	#if numDelete is not supplied by user, delete all in group. If maxRules specified and numDelete is not, then delete until at maxRules
	if [ -z $numDelete ]
	then
	  if [ -z $maxRules ]
	  then
	    numDelete=$numRules;
	  else
	    numDelete=$((numRules-maxRules))
	  fi
	fi

	#use user supplied number to delete
	if [ $numDelete -le $numRules ]
	then
	  iterate=$numDelete
	else  
	  iterate=$numRules
	fi

	for (( j=0; j<$iterate; j++ ))
        do
                CIDR=`aws ec2 describe-security-groups --group-name $groupName | jq -r \ '.["SecurityGroups"] | .[0] | .["IpPermissions"] | .['"$i"'] | .["IpRanges"] | .['"$delNumber"'] | .["CidrIp"]'`
                echo "removed: "$CIDR
		aws ec2 revoke-security-group-ingress --group-name $groupName --protocol tcp --port $port --cidr $CIDR
		if [ $desc -eq 1 ]
        	then
          	  delNumber=$((delNumber-1))
        	fi
        done
	break
	fi
        fi
done
